% The Doctor is busy right now.  Please relax and he will be
  ready to serve you in a minute...
                                    - The Doctor's secretary

% (SETQ ECHO)
%File:  DOCTOR.LIB		05/20/80	The Soft Warehouse %

(PROG1
  ""
  (LOOP ((EQ (EVAL (READ)) STOP)) )
  (RDS CONTALK LIB)
  (LOOP ((EQ (EVAL (READ)) STOP)) )
  (RDS)
  (DOCTOR) )

(PUTD DEFUN (QUOTE (NLAMBDA (FUNC DEF)
  (PUTD FUNC DEF)
  FUNC )))

(DEFUN DOCTOR (LAMBDA (FILE
    SENTENCE KEYSTACK MEMSTACK FLIPFLOP)
  ( ((NULL FILE))
    (WRS (CAR FILE) (CADR FILE) (CADDR FILE))
    (SETQ ECHO T) )
  (TERPRI)
  (PRTSENT (QUOTE (I AM AT YOUR SERVICE ";" JUST TELL ME
    ANYTHING THAT TROUBLES OR CONCERNS YOU ".")))
  (PRIN1 "  ")
  (PRTSENT (QUOTE (PLEASE END YOUR SENTENCES WITH A """."""
    """?""" OR """!""" AND THEN HIT THE """RETURN""" KEY ".")))
  (TERPRI)
  (SETNONE)
  (LOOP
    (PRIN1 "P. ")
    (SETQ SENTENCE (MAKSEN (READSENT)))
    (SETQ KEYSTACK (CDR SENTENCE))
    (SETQ SENTENCE (CAR SENTENCE))
    ((EQUAL SENTENCE (GOODBYE))
      (TERPRI)
      (PRIN1 "D. ")
      (PRTSENT (QUOTE (I HOPE I HAVE BEEN OF SOME SERVICE ";"
        LET'S GET TOGETHER AGAIN ".")))
      "" )
    (TERPRI)
    (PRIN1 "D. ")
    (PRTSENT (ANALYZE))
    (TERPRI)
    (MEMORY) ) ))

(DEFUN MAKSEN (LAMBDA (SENTENCE WORD FLAG RULE KEYSTACK)
  (SETQ KEYSTACK (CONS))
  (LOOP
    ((NULL SENTENCE)
      (CONS (REVERSE RULE) KEYSTACK) )
    (SETQ WORD (CAR SENTENCE))
    ( ((NUMBERP WORD)
	(SETQ WORD (COND
	  ((ZEROP WORD) ZERO)
	  ((EQ WORD 1) ONE)
	  ((EQ WORD 2) TWO)
	  (NUMBER) )) ) )
    ((MEMBER WORD PCTLIS)
      (SETQ FLAG (MAKSEN (CDR SENTENCE)))
      ((NULL (CDR KEYSTACK)) FLAG)
      ((AND (CDDR FLAG) (NOT (GREATERP
	  (GETP (CDR KEYSTACK) (QUOTE PRIORITY))
	  (GETP (CDDR FLAG) (QUOTE PRIORITY)) )))
	FLAG )
      (CONS (REVERSE RULE) KEYSTACK) )
    ( ((GETP WORD (QUOTE MEMR))
	(SETQ MEMSTACK (APPEND (GETP WORD (QUOTE MEMR)) MEMSTACK)) ) )
    ( ((GETP WORD (QUOTE PRIORITY))
        ((AND (CDR KEYSTACK) (GREATERP
 	    (GETP WORD (QUOTE PRIORITY))
	    (GETP (CDR KEYSTACK) (QUOTE PRIORITY)) ))
	  (RPLACD KEYSTACK (CONS (CDR KEYSTACK) (CDR WORD))) )
	(BCONC (CDR WORD) KEYSTACK) ) )
    (SETQ WORD (COND 
        ((GETP WORD (QUOTE TRANSLATION)))
        (WORD) ))
    (SETQ RULE (CONS WORD RULE))
    (SETQ SENTENCE (CDR SENTENCE)) ) ))

(DEFUN ANALYZE (LAMBDA (RULES PARSLST CR EXIT)
  (SETQ FLIPFLOP (NOT FLIPFLOP))
  (BCONC (GETP (QUOTE NONE) (COND
      ((NULL FLIPFLOP)
        (QUOTE MEM) )
      ((QUOTE LASTRESORT)) ))
    KEYSTACK )
  (SETQ KEYSTACK (CDR KEYSTACK))
  (SETQ RULES (GETP KEYSTACK (QUOTE RULES)))
  (LOOP
    (SETQ EXIT NIL)
    ( ((OR (NULL RULES) (EQ (CAR RULES) (QUOTE NEWKEY)))
        (SETQ KEYSTACK (CAR KEYSTACK)) 
        (SETQ RULES (GETP KEYSTACK (QUOTE RULES))) )
      ((ATOM (CAR RULES))
        (SETQ RULES (GETP (CAR RULES) (QUOTE RULES))) )
      (SETQ PARSLST (CONS))
      ((NOT (TEST (CAAR RULES) SENTENCE))
        (SETQ RULES (CDR RULES)) )
      (SETQ RULES (CAR (ADVANCE RULES)))
      (SETQ CR (CAR RULES))
      ((ATOM CR))
      ((EQ (CAR CR) (QUOTE PRE))
        (SETQ SENTENCE (RECONSTRUCT (CADR CR) PARSLST))
        (SETQ RULES (CDDR CR)) )
      (SETQ EXIT T) )
    ((EVAL EXIT)
      (RECONSTRUCT CR PARSLST) ) ) ))

(DEFUN MEMORY (LAMBDA (PARSLST X)
  (LOOP
    ((NULL MEMSTACK))
    (SETQ PARSLST (CONS))
    ( ((TEST (CAAR MEMSTACK) SENTENCE)
	(SETQ X (CDAR (CADR (GETP (QUOTE NONE) (QUOTE MEM)))))
	(RPLACA X (CONS (CAR X) (CONS
	  (RECONSTRUCT (CAAR (ADVANCE MEMSTACK)) PARSLST)
 	  (CDAR X) ))) ) )
    (SETQ MEMSTACK (CDR MEMSTACK)) ) ))

(DEFUN ADVANCE (LAMBDA (RULES)
  (RPLACA (CDAR RULES) (COND
    ((NULL (CDAR (CDAR RULES)))
      (CDDAR RULES) )
    ((CDAR (CDAR RULES))) )) ))

(DEFUN RECONSTRUCT (LAMBDA (RULE PARSLST WORD SENTENCE V1)
  (LOOP
    ((NULL RULE)
      (REVERSE SENTENCE) )
    (SETQ WORD (CAR RULE))
    ( ((NUMBERP WORD)
	(SETQ WORD (NTH PARSLST WORD))
	(SETQ V1 (CAR WORD))
	(LOOP
	  ((EQ V1 (CADR WORD)))
          (SETQ SENTENCE (CONS (CAR V1) SENTENCE))
	  (SETQ V1 (CDR V1)) ) )
      (SETQ SENTENCE (CONS WORD SENTENCE)) )
    (SETQ RULE (CDR RULE)) ) ))

(DEFUN TEST (LAMBDA (D S CD PSV)
  (SETQ PSV (CDR PARSLST))
  (LOOP
    ((NULL D)
      ((NOT S)
	(SETQ PARSLST (CAR PARSLST))
	T )
      (RN) )
    (SETQ CD (CAR D))
    ((ZEROP CD)
      (TCONC S PARSLST)
      (SETQ D (CDR D))
      ((NULL D)
	(SETQ PARSLST (CAR PARSLST))
	T )
      (LOOP
	((TEST D S) T)
	(SETQ S (CDR S))
	((NULL S)
	  (RN) ) ) )
    ((NOT (RNP))
      (RN) )
    (SETQ S (CDR S))
    (SETQ D (CDR D)) ) ))

(DEFUN RN (LAMBDA ()
  (RPLACD PARSLST (COND
    ((NOT PSV) NIL)
    ((RPLACD PSV NIL)) )) NIL))

(DEFUN RNP (LAMBDA ()
  ((NULL S) NIL)
  ((NUMBERP CD)
    (TCONC S PARSLST)
    (SETQ S (NTH S CD)) )
  ((COND
    ((ATOM CD)
      (EQ CD (CAR S)) )
    ((CAR CD)
      (MEMBER (CAR S) CD) )
    ((TEST4 (CAR S) (CDR CD))) )
      (TCONC S PARSLST) T ) ))

(DEFUN TEST4 (LAMBDA (CS L)
  (LOOP
    ((GETP CS (CAR L)))
    (SETQ L (CDR L))
    ((NULL L) NIL) ) ))

(DEFUN BCONC (LAMBDA (X Y)
  (SETQ X (CONS NIL X))
  ((NULL Y)
    (CONS X X) )
  ((NULL (CAR Y))
    (RPLACD Y X)
    (RPLACA Y X) )
  (RPLACA (CAR Y) X)
  (RPLACA Y (CAAR Y)) ))

(DEFUN TCONC (LAMBDA (X Y)
  (SETQ X (CONS X NIL))
  ((NULL Y)
    (CONS X X) )
  ((NULL (CDR Y))
    (RPLACA Y X)
    (RPLACD Y X) )
  (RPLACD (CDR Y) X)
  (RPLACD Y (CDDR Y)) ))

(DEFUN GETP (LAMBDA (X Y)
  (LOOP
    (SETQ X (CDR X))
    ((NULL X) NIL)
    ((EQ (CAR X) Y)
      (CADR X) )
    (SETQ X (CDR X)) ) ))

(DEFUN PUTP (LAMBDA (X Y Z XX)
  (SETQ XX X)
  (LOOP
    ((NULL (CDR X))
      (RPLACD X (LIST Y Z)) )
    ((EQ (CADR X) Y)
      (RPLACA (CDDR X) Z) )
    (SETQ X (CDDR X))
    ((NULL X)
      (RPLACD XX (CONS Y (CONS Z (CDR XX)))) ) )
  Z ))

(DEFUN NTH (LAMBDA (X Y)
  ((ZEROP Y)
    (CONS NIL X) )
  (LOOP
    (SETQ Y (DIFFERENCE Y 1))
    ((ZEROP Y) X)
    (SETQ X (CDR X)) ) ))

(DEFUN APPEND (LAMBDA (X Y)
  ((ATOM X) Y)
  (CONS (CAR X) (APPEND (CDR X) Y)) ))

(DEFUN SETNONE (LAMBDA (A)
  (SETQ A XXXX)
  (RPLACD A (GETP (QUOTE NONE) (QUOTE LASTRESORT)))
  (PUTP (QUOTE NONE) (QUOTE MEM)
    (LIST (QUOTE RULES) (LIST (LIST (LIST 0) (LIST NIL) A))) ) ))

(RDS SCRIPT LIB)
E) ANIMAL) )
  ((MEMBER-TREE ANIMAL (EXTRACT-NO-BRANCH TREE)))
  (MEMBER-TREE ANIMAL (EXTRACT-YES-BRÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ